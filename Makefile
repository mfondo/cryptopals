CC=g++
CFLAGS=-c -Wall -g
LDFLAGS=

BASE64_TEST_SOURCES=Base64.cpp Base64Test.cpp
BASE64_TEST_OBJECTS=$(BASE64_TEST_SOURCES:.cpp=.o)
BASE64_TEST_EXECUTABLE=Base64Test.out
base64Test: $(BASE64_TEST_SOURCES) $(BASE64_TEST_EXECUTABLE)
$(BASE64_TEST_EXECUTABLE): $(BASE64_TEST_OBJECTS)
	$(CC) $(LDFLAGS) $(BASE64_TEST_OBJECTS) -o $@

HEX_TEST_SOURCES=Hex.cpp HexTest.cpp
HEX_TEST_OBJECTS=$(HEX_TEST_SOURCES:.cpp=.o)
HEX_TEST_EXECUTABLE=HexTest.out
hexTest: $(HEX_TEST_SOURCES) $(HEX_TEST_EXECUTABLE)
$(HEX_TEST_EXECUTABLE): $(HEX_TEST_OBJECTS)
	$(CC) $(LDFLAGS) $(HEX_TEST_OBJECTS) -o $@	

CHALLENGE_1_1_SOURCES=Base64.cpp Hex.cpp Challenge_1_1.cpp
CHALLENGE_1_1_OBJECTS=$(CHALLENGE_1_1_SOURCES:.cpp=.o)
CHALLENGE_1_1_EXECUTABLE=Challenge_1_1.out
challenge_1_1: $(CHALLENGE_1_1_SOURCES) $(CHALLENGE_1_1_EXECUTABLE)
$(CHALLENGE_1_1_EXECUTABLE): $(CHALLENGE_1_1_OBJECTS)
	$(CC) $(LDFLAGS) $(CHALLENGE_1_1_OBJECTS) -o $@

CHALLENGE_1_2_SOURCES=Xor.cpp Hex.cpp Challenge_1_2.cpp
CHALLENGE_1_2_OBJECTS=$(CHALLENGE_1_2_SOURCES:.cpp=.o)
CHALLENGE_1_2_EXECUTABLE=Challenge_1_2.out
challenge_1_2: $(CHALLENGE_1_2_SOURCES) $(CHALLENGE_1_2_EXECUTABLE)
$(CHALLENGE_1_2_EXECUTABLE): $(CHALLENGE_1_2_OBJECTS)
	$(CC) $(LDFLAGS) $(CHALLENGE_1_2_OBJECTS) -o $@		

.cpp.o:
	$(CC) $(CFLAGS) $< -o $@

clean:
	rm -rf *.o *.out
